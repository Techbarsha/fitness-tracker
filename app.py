# -*- coding: utf-8 -*-
"""Personal Fitness Tracker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oQ2XSSh7AWG2rCZYbsC_oSChLc2a8dqN

Title :"Workout & Fitness Tracker: Unlocking Health Metrics with Data Analysis"
Detailed Dataset Description:
The Workout & Fitness Tracker Dataset provides a structured view of individuals‚Äô workout habits, health parameters, and lifestyle choices. This dataset enables data-driven insights into fitness patterns, helping to optimize training plans, track calorie expenditure, and analyze health correlations.

1Ô∏è‚É£ Dataset Overview

Objective: Analyze workout patterns, fitness trends, and their impact on health metrics.

Use Cases:
Predicting calorie burn based on workout type.

Analyzing heart rate variations with workout intensity.

Correlating sleep, hydration, and exercise performance.

Developing machine learning models for fitness recommendations.

Column Descriptions
Column Name Description

User ID Unique identifier for each user.

Age Age of the individual in years.

Gender Categorical feature (Male/Female/Other).

Height (cm) Height of the user in centimeters.

Weight (kg) Weight of the user in kilograms.

Workout Type Type of workout (e.g., Cardio, Strength, Yoga).

Workout Duration (mins) Total duration of workout in minutes.

Calories Burned Total calories burned during the workout.

Heart Rate (bpm) Average heart rate during the session.

Steps Taken Total steps counted in the workout session.

Distance (km) Distance covered in kilometers.

Workout Intensity Workout difficulty level (Low, Medium, High).

Sleep Hours Number of sleep hours recorded per day.

Water Intake (liters) Daily water consumption in liters.

Daily Calories Intake Total calories consumed per day.

Resting Heart Rate (bpm) User‚Äôs heart rate at rest.

VO2 Max Maximum oxygen uptake (indicator of cardiovascular fitness).

Body Fat (%) Percentage of body fat.

Mood Before Workout Mood rating before the workout (e.g., Happy, Tired).

Mood After Workout Mood rating after the workout.

3Ô∏è‚É£ Potential Insights & Visualizations
üîπ Correlation Analysis:

Relationship between workout intensity and calories burned.

How sleep hours impact resting heart rate & VO2 Max.

Effect of hydration levels on workout performance.

üîπ Machine Learning Predictions:

Predict calories burned based on age, weight, workout type, and intensity.

Classify workout type using heart rate, steps, and distance.

Recommend optimal workout duration based on user‚Äôs health profile.

Import libraries
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

"""Import dataset"""

df = pd.read_csv('/content/workout_fitness_tracker_data.csv')

df.head()

df.tail()

df.info()

df.describe()

df.isnull().sum()

df.duplicated()

df.columns

# Set plot style
sns.set_style("whitegrid")

# Histogram for numeric features
df.hist(figsize=(12, 8), bins=20, edgecolor="black")
plt.suptitle("Feature Distribution", fontsize=14)
plt.show()

# Boxplot to detect outliers
plt.figure(figsize=(12, 6))
sns.boxplot(data=df[['Age', 'Height (cm)', 'Weight (kg)', 'Calories Burned', 'Sleep Hours', 'VO2 Max']])
plt.title("Boxplot of Key Features", fontsize=14)
plt.xticks(rotation=30)
plt.show()

categorical_cols = df.select_dtypes(include=['object']).columns.tolist()

df_encoded = df.copy()
for col in categorical_cols:
    df_encoded[col] = df_encoded[col].astype('category').cat.codes

plt.figure(figsize=(12, 8))
sns.heatmap(df_encoded.corr(), annot=True, cmap="coolwarm", linewidths=0.5, fmt=".2f")
plt.title("Correlation Heatmap", fontsize=14)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=df['Workout Duration (mins)'], y=df['Calories Burned'], hue=df['Workout Intensity'], palette="coolwarm")
plt.xlabel("Workout Duration (mins)")
plt.ylabel("Calories Burned")
plt.title("Calories Burned vs Workout Duration")
plt.show()

plt.figure(figsize=(10, 5))
sns.lineplot(x=df['Steps Taken'], y=df['Distance (km)'], marker="o", color="b")
plt.xlabel("Steps Taken")
plt.ylabel("Distance Covered (km)")
plt.title("Steps Taken vs Distance Covered")
plt.show()

plt.figure(figsize=(8, 6))
sns.violinplot(data=df[['Resting Heart Rate (bpm)', 'Heart Rate (bpm)']], palette="coolwarm")
plt.title("Heart Rate Distribution: Resting vs During Workout")
plt.show()

plt.figure(figsize=(8, 5))
sns.countplot(x=df["Mood Before Workout"], hue=df["Mood After Workout"], palette="coolwarm")
plt.title("Mood Before vs After Workout")
plt.xlabel("Mood Before Workout")
plt.ylabel("Count")
plt.legend(title="Mood After Workout")
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x=df["Workout Intensity"], y=df["Sleep Hours"], palette="coolwarm")
plt.title("Workout Intensity vs Sleep Hours")
plt.xlabel("Workout Intensity")
plt.ylabel("Sleep Hours")
plt.show()

"""# **EDA**"""

df['Gender'].value_counts().to_dict()

from sklearn.manifold import TSNE

COLUMNS = [key for key, value in df.dtypes.to_dict().items() if str(value) in {'float64', 'int64'}]
RANDOM_STATE = 2025
TARGET = 'Gender'

reducer = TSNE(random_state=RANDOM_STATE)
plot_df = pd.DataFrame(columns=['x', 'y'], data=reducer.fit_transform(X=df[COLUMNS]))
plot_df[TARGET] = df[TARGET].tolist()

from plotly import express
from plotly import io

io.renderers.default = 'iframe'
express.scatter(data_frame=plot_df, x='x', y='y', color=TARGET)

from plotly import express
from plotly import io

io.renderers.default = 'colab'  # Set the renderer to 'colab'

# Define your desired colors (replace with your preferences)
colors = ['red', 'green', 'blue']

# Create the scatter plot with custom colors
express.scatter(data_frame=plot_df, x='x', y='y', color=TARGET,
                 color_discrete_sequence=colors)  # Assign custom colors

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score

# Drop 'User ID' as it is not a useful feature
df = df.drop(columns=['User ID'], errors='ignore')

# Identify categorical columns
categorical_cols = df.select_dtypes(include=['object']).columns.tolist()

# Label encoding for categorical columns
label_encoders = {}
for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Define features (X) and target (y)
X = df.drop(columns=['Workout Type'])  # Assuming 'Workout Type' is the target variable
y = df['Workout Type']

# Train-test split (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Standardize numerical features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Define ML models
models = {
    "Logistic Regression": LogisticRegression(),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "SVM": SVC(),
    "K-Nearest Neighbors": KNeighborsClassifier(),
    "Decision Tree": DecisionTreeClassifier(),
    "XGBoost": XGBClassifier(use_label_encoder=False, eval_metric='logloss')
}

# Train and evaluate models
accuracy_scores = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_scores[name] = accuracy * 100

plt.figure(figsize=(10, 6))
sns.barplot(x=list(accuracy_scores.keys()), y=list(accuracy_scores.values()), palette="viridis")
plt.xlabel("ML Models")
plt.ylabel("Accuracy (%)")
plt.title("Model Accuracy Comparison")
plt.xticks(rotation=30)
plt.ylim(0, 100)
plt.show()

express.scatter(data_frame=df, x='Height (cm)', y='Weight (kg)', color=TARGET, facet_col=TARGET)

"""# **This code conducted by Barsha Saha**"""
